import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

training_inputs = np.array([[1,0,0,1,1,1,0],
                            [1,1,1,1,1,1,1],
                            [1,1,1,1,0,0,0],
                            [1,0,0,0,0,0,0],
                            [1,1,1,1,1,1,1],
                            [1,1,1,1,1,1,1],
                            [0,0,0,0,0,0,0],
                            [1,1,1,1,1,1,1],
                            [0,0,0,0,0,0,0],
                            [0,1,0,0,1,0,0],
                            [1,0,1,1,1,1,1],
                            [0,1,0,0,0,0,0],
                            [0,0,1,0,1,1,1],
                            [0,0,1,0,1,1,1],
                            [0,0,0,1,0,1,0],
                            [0,0,0,0,0,0,0],
                            [1,1,0,1,1,0,0],
                            [0,1,1,1,1,1,1],
                            [0,0,0,0,0,0,0],
                            [0,1,0,0,0,0,0],
                            [1,1,0,1,0,1,0],
                            [0,1,1,1,0,1,1],
                            [0,0,0,0,0,0,0],
                            [1,0,1,0,0,0,0],
                            [1,0,0,0,0,0,0],
                            [1,1,1,1,1,1,1],
                            [0,0,0,1,0,0,0],
                            [0,1,1,1,1,1,0],
                            [1,1,0,0,1,1,0],
                            [1,1,1,1,1,1,1],
                            [0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0],
                            [0,1,1,0,0,1,1],
                            [0,0,1,0,1,1,0],
                            [0,0,0,0,1,0,0],
                            [0,1,1,0,1,1,1],
                            [0,0,1,0,1,1,1],
                            [1,0,0,1,0,0,0],
                            [1,1,1,1,0,1,1],
                            [1,1,0,0,0,0,0],
                            [1,1,0,1,1,1,1],
                            [0,0,1,0,0,1,0],
                            [1,0,0,0,0,0,0]])

training_outputs = np.array([[1,0,0,1,1,0,1,0,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,1,0,1,1,0,0,0,1,0,0,0]]).T

np.random.seed(1)

synaptic_weights = 2 * np.random.random((7,1)) - 1

print('случайные инициализирующие веса:')
print(synaptic_weights)


#метод обратного распространения
for i in range(72):
    input_layer = training_inputs
    outputs = sigmoid( np.dot(input_layer, synaptic_weights) )

    err = training_outputs - outputs
    adjustments = np.dot( input_layer.T, err * (outputs * (1 - outputs)) )

    synaptic_weights += adjustments

print('вес после обучения')
print(synaptic_weights)

print('результат после обучения:')
print(outputs)


#тест

new_inputs = np.array([0,0,0,0,0,0,0])
output = sigmoid( np.dot( new_inputs, synaptic_weights) )

print('новая ситуация')
print(output)